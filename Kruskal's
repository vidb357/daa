#include <stdio.h>
#include <stdlib.h>

#define V 4
#define E 5

struct Edge {
    int src, dest, weight;
};

struct Subset {
    int parent, rank;
};

int compare(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}

int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

void Union(struct Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);
    
    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

void kruskalMST(struct Edge edges[], int n) {
    struct Subset subsets[n];
    for (int i = 0; i < n; i++) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }
    
    qsort(edges, E, sizeof(edges[0]), compare);
    
    for (int i = 0; i < E; i++) {
        int x = find(subsets, edges[i].src);
        int y = find(subsets, edges[i].dest);
        
        if (x != y) {
            printf("%d - %d: %d\n", edges[i].src, edges[i].dest, edges[i].weight);
            Union(subsets, x, y);
        }
    }
}

int main() {
    struct Edge edges[] = { {0, 1, 10}, {0, 2, 6}, {0, 3, 5},
                             {1, 3, 15}, {2, 3, 4} };
    kruskalMST(edges, V);
    return 0;
}
